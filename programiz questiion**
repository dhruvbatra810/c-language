/*Given a sorted list of integers, find all distinct pair of integers in the list of N integers with sum equal to a given number K with O (n log n ) or O(n) time complexity.

Complete the function below which takes the array and K as parameters and return the number of pairs if any and 0 otherwise.



Input Format

First line of input will contain a positive integer T = number of test cases. Each test case will contain 2 lines. First line of each test case two positive integer - N and K. Next line will contain N numbers separated by space in non-decreasing order.

Output Format
For each test case, print number of distinct pairs whose sum will be equal to k. A pair must have two numbers at different indices. 
Two pairs are different if at least one of the indices in them is uncommon. Indices - (2,3) and (3,2) are not distinct, but (2,3) and (2,4) are.

Sample Input

3
10 11
1 2 3 4 5 6 7 8 9 10
5 10
2 4 6 8 10
6 27
12 15 20 22 34 36
Sample Output

5
2
1
*/
//complexity of O(n) but not for case in which all no are same(by dhruv batra)
#include <stdio.h>
#include<stdlib.h>
int main()
{
int testcase;
printf("neter the test cases");
scanf("%d",&testcase);
int size,check;
printf("neter size and checking no");
scanf("%d %d",&size,&check);
int *z=(int *)malloc(size*sizeof(int));
printf("neter the array");
for(int i=0;i<size;i++)
scanf("%d",z+i);
int start=0,end=size-1;
int count=0;
int chuu=0;
int same=0;
printf("%d",*(z-1));
while(start<end)
{


     if(z[start]+z[end]==check)
    {

        if(z[start+1]==z[start]||(z[start-1]==z[start]&&start!=0))
        {
            start++;

            //  count++;
             same++;
        }
        else if(z[end]==z[end-1]||(z[end]==z[end+1]&&end!=size-1))
        {

            end--;
            count++;
        }
        else{
                

        count++;
        start++;
        end--;

        }
    }
    else if(z[start]+z[end]>check)
    {

        if(z[end]==z[end+1]||z[end]==z[end-1])
        {

            count+=same;
                             

        }
         end--;
    }
    else
    {
        start++;
    }
}
printf("%d\n",count);
    return 0;
}
